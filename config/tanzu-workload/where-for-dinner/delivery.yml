apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: where-for-dinner
  annotations:
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: where-for-dinner-api-gateway
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: web
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "4"
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/target: "200"
        boot.spring.io/actuator: http://:8081/actuator
        boot.spring.io/version: 3.0.7
        conventions.carto.run/applied-conventions: |-
          appliveview-sample/app-live-view-appflavour-check
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
          spring-boot-convention/app-live-view-appflavours-scg
        developer.conventions/target-containers: workload
        kubectl.kubernetes.io/last-applied-configuration: |
          {"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"annotations":{},"labels":{"app.kubernetes.io/part-of":"where-for-dinner-api-gateway","apps.tanzu.vmware.com/auto-configure-actuators":"true","apps.tanzu.vmware.com/has-tests":"true","apps.tanzu.vmware.com/workload-type":"web"},"name":"where-for-dinner","namespace":"tanzu-workload"},"spec":{"build":{"env":[{"name":"BP_JVM_VERSION","value":"17"}]},"env":null,"params":[{"name":"gitops_server_address","value":"https://github.com/"},{"name":"gitops_repository_owner","value":"kirtiapte"},{"name":"gitops_repository_name","value":"where-for-dinner"},{"name":"gitops_server_kind","value":"github"},{"name":"gitops_commit_branch","value":"origin/main"},{"name":"gitops_pull_request_title","value":"ready for review"},{"name":"gitops_pull_request_body","value":"generated by supply chain"},{"name":"testing_pipeline_matching_labels","value":{"apps.tanzu.vmware.com/language":"java","apps.tanzu.vmware.com/pipeline":"test"}},{"name":"annotations","value":{"autoscaling.knative.dev/maxScale":"4","autoscaling.knative.dev/minScale":"1","autoscaling.knative.dev/target":"200"}}],"resources":{"limits":{"cpu":"1500m","memory":"750M"},"requests":{"cpu":"100m","memory":"500M"}},"serviceClaims":null,"source":{"git":{"ref":{"branch":"main"},"url":"https://github.com/kirtiapte/where-for-dinner"},"subPath":"where-for-dinner-api-gateway"}}}
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: where-for-dinner-api-gateway
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/has-tests: "true"
        apps.tanzu.vmware.com/workload-type: web
        carto.run/workload-name: where-for-dinner
        conventions.carto.run/framework: spring-boot
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8081"
        tanzu.app.live.view.application.flavours: spring-boot_spring-cloud-gateway
        tanzu.app.live.view.application.name: where-for-dinner
    spec:
      containers:
      - env:
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.endpoint.health.show-details="always" -Dmanagement.endpoints.web.base-path="/actuator" -Dmanagement.endpoints.web.exposure.include="*" -Dmanagement.health.probes.enabled="true" -Dmanagement.server.port="8081" -Dserver.port="8080"
        image: kapte.azurecr.io/tap-packages/where-for-dinner-tanzu-workload@sha256:2ebf97449e55f581c7252aea0e4d7464d8b835fdb02e1be7eca20e949e4dfd9a
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources:
          limits:
            cpu: 1500m
            memory: 750M
          requests:
            cpu: 100m
            memory: 500M
        securityContext:
          runAsUser: 1000
      serviceAccountName: default

